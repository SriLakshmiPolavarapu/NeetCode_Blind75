class Solution {
    public int[] topKFrequent(int[] nums, int k) {
       
       HashMap<Integer, Integer> map = new HashMap<>();

       // for storing it in a hashtable - hashmap code
       for(int i=0;i<nums.length;i++)
       {
            if(map.containsKey(nums[i]))
            {
                map.put((nums[i]), map.get(nums[i]) + 1);
            }
            else
            {
                map.put((nums[i]), 1);
            }
       }

       // creating bucket - to reduce the number of iternations

       List<Integer>[] bucket = new List[nums.length+1];

       List<Integer> keys = new ArrayList<>(map.keySet());

       for(int i=0;i<keys.size();i++)
       {
            int key = keys.get(i);
            int freq = map.get(key);

            if(bucket[freq] == null)
            {
                bucket[freq] = new ArrayList<>();
            }
            bucket[freq].add(key);
       }

       //loop through the bucket from the end (to start from the highest frequency elements)

       List<Integer> top = new ArrayList<>();
       for(int pos = bucket.length-1; pos >= 0 && top.size() < k; pos--)
       {
            if(bucket[pos] != null)
            {
                    for(int i=0;i<bucket[pos].size() && top.size() < k;i++) //for check the elements inside one bucket (one frequency) 
                    {
                        top.add(bucket[pos].get(i));
                    }
            }
       }

       // convert to int array

       int[] result = new int[top.size()];
       for(int i=0;i<top.size();i++)
       {
        result[i] = top.get(i);
       }
       return result;


    }
}
